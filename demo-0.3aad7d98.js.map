{"version":3,"sources":["index.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/src/utils.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/src/Uniform.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/node_modules/gl-matrix/esm/common.js","../package.json","../node_modules/@nardgl/console-greeting/src/index.js","../node_modules/@nardgl/loader/src/index.js","../node_modules/@nardgl/core/src/utils.js","../node_modules/@nardgl/core/node_modules/gl-matrix/esm/common.js","../node_modules/@nardgl/core/node_modules/gl-matrix/esm/mat2.js","../node_modules/@nardgl/core/node_modules/gl-matrix/esm/mat2d.js","../node_modules/@nardgl/core/node_modules/gl-matrix/esm/mat3.js","../node_modules/@nardgl/core/node_modules/gl-matrix/esm/mat4.js","../node_modules/@nardgl/core/node_modules/gl-matrix/esm/vec3.js","../node_modules/@nardgl/core/node_modules/gl-matrix/esm/vec4.js","../node_modules/@nardgl/core/node_modules/gl-matrix/esm/quat.js","../node_modules/@nardgl/core/node_modules/gl-matrix/esm/quat2.js","../node_modules/@nardgl/core/node_modules/gl-matrix/esm/vec2.js","../node_modules/@nardgl/core/node_modules/gl-matrix/esm/index.js","../node_modules/@nardgl/core/src/m4.js","../node_modules/@nardgl/core/src/Transform/index.js","../node_modules/@nardgl/core/src/Camera/index.js","../node_modules/@nardgl/core/src/WebGLRenderer.js","../node_modules/@nardgl/core/src/Uniform.js","../node_modules/@nardgl/core/src/Attribute.js","../node_modules/@nardgl/core/src/Material/index.js","../node_modules/@nardgl/core/src/TextureUniform.js","../node_modules/@nardgl/core/src/Shader/index.js","../node_modules/@nardgl/core/src/Material/BasicMaterial/index.js","../node_modules/@nardgl/core/src/Material/PbrMetallicRoughnessMaterial/index.js","../node_modules/@nardgl/core/src/Primitive/index.js","../node_modules/@nardgl/core/src/Primitive/GltfPrimitive.js","../node_modules/@nardgl/core/src/index.js","../node_modules/@nardgl/gltf-parser/src/index.js","../node_modules/@nardgl/utils/src/Grid/fragment.glsl","../node_modules/@nardgl/utils/src/Grid/vertex.glsl","../node_modules/@nardgl/utils/node_modules/@nardgl/core/node_modules/gl-matrix/esm/mat2.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/node_modules/gl-matrix/esm/mat2d.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/node_modules/gl-matrix/esm/mat3.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/node_modules/gl-matrix/esm/mat4.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/node_modules/gl-matrix/esm/vec3.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/node_modules/gl-matrix/esm/vec4.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/node_modules/gl-matrix/esm/quat.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/node_modules/gl-matrix/esm/quat2.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/node_modules/gl-matrix/esm/vec2.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/node_modules/gl-matrix/esm/index.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/src/m4.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/src/Transform/index.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/src/Camera/index.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/src/WebGLRenderer.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/src/Attribute.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/src/Material/index.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/src/TextureUniform.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/src/Shader/index.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/src/Material/BasicMaterial/index.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/src/Material/PbrMetallicRoughnessMaterial/index.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/src/Primitive/index.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/src/Primitive/GltfPrimitive.js","../node_modules/@nardgl/utils/node_modules/@nardgl/core/src/index.js","../node_modules/@nardgl/utils/src/Grid/index.js","../node_modules/@nardgl/utils/src/index.js","Particles/vertex.glsl","Particles/fragment.glsl","Particles/index.js","Quad/vertex.glsl","Quad/fragment.glsl","Quad/index.js","TexturedCube/vertex.glsl","TexturedCube/fragment.glsl","TexturedCube/index.js"],"names":["version","conf","key","bind","gl","program","ARRAY_TYPE","Error","createShader","Float32Array","type","toGLSL","success","Math","random","shader","log","a","degree","equals","abs","b","max","Matrix4fv","createProgram","vertexShader","fragmentShader","linkProgram","getProgramParameter","LINK_STATUS","console","vertexShaderSrc","FRAGMENT_SHADER","check","data","value","canvas","passUniforms","displayWidth","displayHeight","range","getSize","err","module","exports","name","description","keywords","author","homepage","license","main","directories","lib","test","files","repository","url","scripts","build","bugs","dependencies","batchLoad","promises","onProgress","count","length","resolved","Promise","forEach","p","then","all","loadAsset","arg","mimeType","fetch","res","blob","thenFn","blobToImg","blobToJson","blobToText","result","asset","resolve","reject","fr","FileReader","onload","onerror","readAsText","JSON","parse","URL","createObjectURL","img","Image","src","constructor","loaders","assets","map","x","waitingScreen","document","createElement","style","backgroundColor","width","height","position","zIndex","display","justifyContent","alignItems","logo","appendChild","body","add","push","addArray","assetUrls","concat","start","progress","removeChild","reduce","Object","keys","source","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","attachShader","getProgramInfoLog","deleteProgram","fragmentShaderSrc","VERTEX_SHADER","clientWidth","clientHeight","floor","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","componentType","size","srcData","Uint16Array","EPSILON","Array","RANDOM","PI","out","glMatrix","m00","m01","m10","m11","a1","a0","a2","a3","det","rad","s","sin","c","cos","v","v0","v1","sqrt","pow","L","D","U","b0","b1","b2","b3","scale","multiply","subtract","mul","sub","d","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","y","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","a03","a13","a23","a30","a31","a32","a33","b00","b02","b03","b04","b05","b06","b07","b08","b09","b10","a6","a7","a8","b6","b7","b8","b12","b20","b22","m03","m13","m23","m30","m31","m32","m33","axis","t","len","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","fromRotationTranslation","mat","trace","S","xy","xz","yz","sx","sy","sz","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","left","right","bottom","top","near","far","rl","tb","nf","fovy","aspect","f","tan","Infinity","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","lr","bt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","identity","target","a9","a14","a15","b9","b13","b14","b15","ceil","min","round","factorTimes2","factor1","factor2","factor3","factor4","inverseFactor","inverseFactorTimesTwo","r","zScale","m","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","tempA","fromValues","tempB","normalize","cosine","dot","acos","create","divide","distance","squaredDistance","squaredLength","div","dist","sqrDist","sqrLen","vec","stride","offset","fn","i","l","u","A","B","C","E","F","G","H","I","J","v2","v3","v4","s1","s2","ix","iy","iz","iw","out_axis","u1","u2","u3","sqrt1MinusU1","sqrtU1","invDot","halfToRad","cx","cy","cz","setAxisAngle","slerp","omega","cosom","sinom","scale0","scale1","fromMat3","fTrace","fRoot","j","k","clone","vec4","copy","set","lerp","exactEquals","rotationTo","tmpvec3","vec3","xUnitVec3","yUnitVec3","cross","sqlerp","temp1","temp2","setAxes","matr","mat3","view","dq","w1","outer","quat","mat4","getRotation","getTranslation","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","rotateX","rotateY","rotateZ","axisLength","mt","sqlen","a_dot_b","getReal","setReal","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","p0","p1","sinC","cosC","len1","len2","rotationX","fromXRotation","rotationY","fromYRotation","rotationZ","fromZRotation","m4","projection","depth","perspective","fromTranslation","scaling","fromScaling","multiplyAll","input","arguments","reduceArgsWithFn","invert","translate","tz","angleInRadians","Transform","matrix","rotation","computeMatrix","transforms","transform","viewMatrix","getContext","parentNode","overflow","margin","scene","camera","Camera","projectionMatrix","init","startAnimating","fps","fpsInterval","Date","now","startTime","render","beforeDraw","dt","drawFrame","primitive","useProgram","hasRenderedOnce","updateUniforms","bindVertexArray","vao","setUniform","drawConf","primitiveType","draw","TRIANGLES","indices","drawElements","UNSIGNED_SHORT","drawArrays","requestAnimationFrame","elapsed","viewport","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enable","DEPTH_TEST","Matrix2fv","Matrix3fv","getLocation","getUniformLocation","update","location","options","getAttribLocation","array","attributes","uniforms","Attribute","Uniform","texture","loadTexture","path","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","image","addEventListener","generateMipmap","activeTexture","TEXTURE0","uniform1i","programInfo","uniformLocations","u_texture","Shader","script","decorated","join","Material","attributesData","uniformsData","texturesData","vertexShaderPartial","fragmentShaderPartial","extraUniforms","TextureUniform","VertexShader","FragmentShader","bindUniforms","uniform","bindAttributes","attribute","BasicMaterial","material","find","updateUniform","createVertexArray","bindBuffer","ARRAY_BUFFER","createBuffer","bufferData","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","elementsConf","usage","vertexAttribPointer","enableVertexAttribArray","Primitive","primitiveData","textureData","vertexPartial","fragmentPartial","PbrMetallicRoughnessMaterial","gltf","buffers","parseB64Buffer","accessors","accessor","itemsPerType","getItemsPerType","elementBytesLength","getComponentArrayType","BYTES_PER_ELEMENT","typedGetter","getDvMethodToRun","unpackBufferViewData","bufferView","images","bufferViews","byteLength","uint8ToUrl","materials","textureId","pbrMetallicRoughness","baseColorTexture","index","textures","uvsAttributeName","texCoord","buffer","b64","uri","byteCharacters","atob","split","dv","DataView","ArrayBuffer","from","char","setUint8","charCodeAt","bufferId","byteOffset","el","loopOffset","id","getPrimitives","meshId","primitives","meshes","byteArray","Blob","verticals","horizontals","pkg","Particles","Quad","NARD","GltfPrimitive","TexturedCube","urls","App","WebGLRenderer","particles","grid","Grid","cube","GltfParser","quad","Loader"],"mappings":"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","file":"demo-0.3aad7d98.js","sourceRoot":"..","sourcesContent":["import pkg from \"../package.json\";\nimport consoleGreet from \"@nardgl/console-greeting\";\nconsoleGreet(\"NardGL\", pkg.version);\n\nexport * from \"@nardgl/loader\";\nexport * from \"@nardgl/core\";\nexport * from \"@nardgl/gltf-parser\";\nexport * from \"@nardgl/utils\";\n","const createShader = function(gl, type, source) {\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (success) {\n    return shader;\n  }\n\n  console.log(gl.getShaderInfoLog(shader));\n  gl.deleteShader(shader);\n};\n\nconst createProgram = function(gl, vertexShader, fragmentShader) {\n  const program = gl.createProgram();\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (success) {\n    return program;\n  }\n\n  console.log(gl.getProgramInfoLog(program));\n  gl.deleteProgram(program);\n};\n\nconst createProgramFromSource = function(\n  gl,\n  vertexShaderSrc,\n  fragmentShaderSrc\n) {\n  const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSrc);\n  const fragmentShader = createShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSrc\n  );\n\n  return createProgram(gl, vertexShader, fragmentShader);\n};\n\nconst resizeCanvas = function(canvas) {\n  // Lookup the size the browser is displaying the canvas.\n  var displayWidth = canvas.clientWidth;\n  var displayHeight = canvas.clientHeight;\n\n  // Check if the canvas is not the same size.\n  if (canvas.width !== displayWidth || canvas.height !== displayHeight) {\n    // Make the canvas the same size\n    canvas.width = displayWidth;\n    canvas.height = displayHeight;\n  }\n};\n\nconst randomInt = function(range) {\n  return Math.floor(Math.random() * range);\n};\n\nconst getSize = function(type) {\n  return {\n    SCALAR: 1,\n    VEC2: 2,\n    VEC3: 3,\n    VEC4: 4,\n    MAT2: 4,\n    MAT3: 9,\n    MAT4: 16\n  }[type];\n};\n\nconst getGLSLType = function(componentType, type) {\n  const size = getSize(type);\n  return {\n    5126: function(size) {\n      return {\n        1: \"float\",\n        2: \"vec2\",\n        3: \"vec3\",\n        4: \"vec4\"\n      }[size];\n    },\n    5123: function(size) {\n      return {\n        1: \"int\",\n        2: \"ivec2\",\n        3: \"ivec3\",\n        4: \"ivec4\"\n      }[size];\n    }\n  }[componentType](size);\n};\n\nconst getTypedArray = function(srcData, componentType) {\n  return new {\n    5126: Float32Array,\n    5123: Uint16Array\n  }[componentType](srcData);\n};\n\nexport {\n  randomInt,\n  resizeCanvas,\n  createProgram,\n  createShader,\n  createProgramFromSource,\n  getSize,\n  getTypedArray,\n  getGLSLType\n};\n","class Uniform {\n  constructor(conf) {\n    for (var key in conf) {\n      this[key] = conf[key];\n    }\n  }\n\n  bind(gl, program) {\n    this.gl = gl;\n    this.program = program;\n    return this;\n  }\n\n  check() {\n    if (!this.gl || !this.program) {\n      throw new Error(\"Uniform needs to be bound to context and program\");\n    }\n  }\n\n  toGLSL() {\n    const getType = type =>\n      ({\n        \"1f\": \"float\",\n        \"1fv\": \"float\",\n        \"2f\": \"vec2\",\n        \"2fv\": \"vec2\",\n        \"3f\": \"vec3\",\n        \"3fv\": \"vec3\",\n        \"4f\": \"vec4\",\n        \"4fv\": \"vec4\",\n        Matrix2fv: \"mat2\",\n        Matrix3fv: \"mat3\",\n        Matrix4fv: \"mat4\",\n        \"1i\": \"int\",\n        \"1iv\": \"int\",\n        \"2i\": \"ivec2\",\n        \"2iv\": \"ivec2\",\n        \"3i\": \"ivec3\",\n        \"3iv\": \"ivec3\",\n        \"4i\": \"ivec4\",\n        \"4iv\": \"ivec4\",\n        \"1u\": \"uint\",\n        \"1uv\": \"uint\",\n        \"2u\": \"uvec2\",\n        \"2uv\": \"uvec2\",\n        \"3u\": \"uvec3\",\n        \"3uv\": \"uvec3\",\n        \"4u\": \"uvec4\",\n        \"4uv\": \"uvec4\"\n      }[type]);\n\n    return `uniform ${getType(this.type)} ${this.name}${\n      this.count > 2 ? `[${this.count}];\\n` : `;\\n`\n    }`;\n  }\n\n  getLocation() {\n    this.check();\n    return this.gl.getUniformLocation(this.program, this.name);\n  }\n\n  update(data = this.value) {\n    this.check();\n    this.passUniforms({\n      location: this.getLocation(),\n      type: this.type,\n      data: [data]\n    });\n  }\n\n  passUniforms(options) {\n    this.check();\n    const gl = this.gl;\n    const { location, data, type } = options;\n\n    try {\n      gl[`uniform${type}`];\n    } catch (err) {\n      throw err;\n    }\n    //console.log(type, location, data);\n    switch (type) {\n      case \"Matrix2fv\":\n      case \"Matrix2x3fv\":\n      case \"Matrix2x4fv\":\n      case \"Matrix3fv\":\n      case \"Matrix3x2fv\":\n      case \"Matrix3x4fv\":\n      case \"Matrix4fv\":\n      case \"Matrix4x2fv\":\n      case \"Matrix4x3fv\":\n        gl[`uniform${type}`](location, false, [...data[0]]);\n        break;\n\n      default:\n        gl[`uniform${type}`](location, ...data);\n    }\n  }\n}\n\nexport { Uniform };\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","module.exports={name:\"nardgl\",version:\"1.0.6-alpha.0\",description:\"My graphics library\",keywords:[\"webgl\",\"gltf\"],author:\"Mathieu Mence <Mathieu.Mence@matnard.com>\",homepage:\"https://github.com/Matnard/NardGL#readme\",license:\"MIT\",main:\"lib/nardgl.js\",directories:{lib:\"lib\",test:\"__tests__\"},files:[\"lib\"],repository:{type:\"git\",url:\"git+https://github.com/Matnard/NardGL.git\"},scripts:{test:'echo \"Error: run tests from root\" && exit 1',build:\"parcel build ./src/index.js --out-dir lib --out-file nardgl.js\"},bugs:{url:\"https://github.com/Matnard/NardGL/issues\"},dependencies:{\"@nardgl/console-greeting\":\"^1.0.0-alpha.0\",\"@nardgl/core\":\"^0.0.3-alpha.0\",\"@nardgl/gltf-parser\":\"^1.0.2-alpha.0\",\"@nardgl/loader\":\"^1.1.0-alpha.0\",\"@nardgl/utils\":\"^0.0.2-alpha.0\"}};","export default function consoleGreeting(name, version) {\n  const styles = `\n\tpadding-bottom: 17ch;\n\tpadding-right: 17ch;\n\tcolor: white;\n\tbackground: white;\n\ttext-shadow:0ch 1ch 0#ffffff,1ch 1ch 0#ffffff,2ch 1ch 0#ffffff,3ch 1ch 0#ffffff,4ch 1ch 0#ffffff,5ch 1ch 0#ffffff,6ch 1ch 0#ffffff,7ch 1ch 0#ffffff,8ch 1ch 0#ffffff,9ch 1ch 0#ffffff,10ch 1ch 0#ffffff,11ch 1ch 0#ffffff,12ch 1ch 0#ffffff,13ch 1ch 0#ffffff,14ch 1ch 0#ffffff,15ch 1ch 0#ffffff,16ch 1ch 0#ffffff,0ch 2ch 0#ffffff,1ch 2ch 0#ffffff,2ch 2ch 0#ffffff,3ch 2ch 0#ffffff,4ch 2ch 0#ffffff,5ch 2ch 0#ffffff,6ch 2ch 0#ffffff,7ch 2ch 0#764719,8ch 2ch 0#764719,9ch 2ch 0#a86727,10ch 2ch 0#a86727,11ch 2ch 0#ffffff,12ch 2ch 0#ffffff,13ch 2ch 0#ffffff,14ch 2ch 0#ffffff,15ch 2ch 0#ffffff,16ch 2ch 0#ffffff,0ch 3ch 0#ffffff,1ch 3ch 0#ffffff,2ch 3ch 0#ffffff,3ch 3ch 0#ffffff,4ch 3ch 0#ffffff,5ch 3ch 0#764719,6ch 3ch 0#764719,7ch 3ch 0#a86727,8ch 3ch 0#a86727,9ch 3ch 0#cc7c33,10ch 3ch 0#cc7c33,11ch 3ch 0#a86727,12ch 3ch 0#a86727,13ch 3ch 0#ffffff,14ch 3ch 0#ffffff,15ch 3ch 0#ffffff,16ch 3ch 0#ffffff,0ch 4ch 0#ffffff,1ch 4ch 0#ffffff,2ch 4ch 0#ffffff,3ch 4ch 0#ffffff,4ch 4ch 0#764719,5ch 4ch 0#a86727,6ch 4ch 0#a86727,7ch 4ch 0#a86727,8ch 4ch 0#cc7c33,9ch 4ch 0#a86727,10ch 4ch 0#cc7c33,11ch 4ch 0#cc7c33,12ch 4ch 0#cc7c33,13ch 4ch 0#a86727,14ch 4ch 0#ffffff,15ch 4ch 0#ffffff,16ch 4ch 0#ffffff,0ch 5ch 0#ffffff,1ch 5ch 0#ffffff,2ch 5ch 0#ffffff,3ch 5ch 0#764719,4ch 5ch 0#a86727,5ch 5ch 0#a86727,6ch 5ch 0#a86727,7ch 5ch 0#cc7c33,8ch 5ch 0#a86727,9ch 5ch 0#cc7c33,10ch 5ch 0#a86727,11ch 5ch 0#cc7c33,12ch 5ch 0#cc7c33,13ch 5ch 0#cc7c33,14ch 5ch 0#a86727,15ch 5ch 0#ffffff,16ch 5ch 0#ffffff,0ch 6ch 0#ffffff,1ch 6ch 0#ffffff,2ch 6ch 0#ffffff,3ch 6ch 0#764719,4ch 6ch 0#a86727,5ch 6ch 0#a86727,6ch 6ch 0#a86727,7ch 6ch 0#a86727,8ch 6ch 0#cc7c33,9ch 6ch 0#cc7c33,10ch 6ch 0#cc7c33,11ch 6ch 0#cc7c33,12ch 6ch 0#cc7c33,13ch 6ch 0#cc7c33,14ch 6ch 0#a86727,15ch 6ch 0#ffffff,16ch 6ch 0#ffffff,0ch 7ch 0#ffffff,1ch 7ch 0#ffffff,2ch 7ch 0#ffffff,3ch 7ch 0#764719,4ch 7ch 0#a86727,5ch 7ch 0#a86727,6ch 7ch 0#a86727,7ch 7ch 0#cc7c33,8ch 7ch 0#cc7c33,9ch 7ch 0#cc7c33,10ch 7ch 0#cc7c33,11ch 7ch 0#cc7c33,12ch 7ch 0#cc7c33,13ch 7ch 0#cc7c33,14ch 7ch 0#a86727,15ch 7ch 0#ffffff,16ch 7ch 0#ffffff,0ch 8ch 0#ffffff,1ch 8ch 0#ffffff,2ch 8ch 0#ffffff,3ch 8ch 0#764719,4ch 8ch 0#a86727,5ch 8ch 0#a86727,6ch 8ch 0#764719,7ch 8ch 0#a86727,8ch 8ch 0#cc7c33,9ch 8ch 0#cc7c33,10ch 8ch 0#ffffff,11ch 8ch 0#ffffff,12ch 8ch 0#cc7c33,13ch 8ch 0#ffffff,14ch 8ch 0#a86727,15ch 8ch 0#ffffff,16ch 8ch 0#ffffff,0ch 9ch 0#ffffff,1ch 9ch 0#ffffff,2ch 9ch 0#ffffff,3ch 9ch 0#764719,4ch 9ch 0#a86727,5ch 9ch 0#764719,6ch 9ch 0#cc7c33,7ch 9ch 0#cc7c33,8ch 9ch 0#cc7c33,9ch 9ch 0#cc7c33,10ch 9ch 0#ffffff,11ch 9ch 0#000000,12ch 9ch 0#cc7c33,13ch 9ch 0#000000,14ch 9ch 0#a86727,15ch 9ch 0#ffffff,16ch 9ch 0#ffffff,0ch 10ch 0#b0acab,1ch 10ch 0#b0acab,2ch 10ch 0#b0acab,3ch 10ch 0#a86727,4ch 10ch 0#a86727,5ch 10ch 0#764719,6ch 10ch 0#cc7c33,7ch 10ch 0#cc7c33,8ch 10ch 0#cc7c33,9ch 10ch 0#cc7c33,10ch 10ch 0#ffffff,11ch 10ch 0#000000,12ch 10ch 0#cc7c33,13ch 10ch 0#000000,14ch 10ch 0#a86727,15ch 10ch 0#ffffff,16ch 10ch 0#ffffff,0ch 11ch 0#ebe3e0,1ch 11ch 0#ebe3e0,2ch 11ch 0#b0acab,3ch 11ch 0#a86727,4ch 11ch 0#a86727,5ch 11ch 0#764719,6ch 11ch 0#cc7c33,7ch 11ch 0#cc7c33,8ch 11ch 0#cc7c33,9ch 11ch 0#cc7c33,10ch 11ch 0#cc7c33,11ch 11ch 0#cc7c33,12ch 11ch 0#cc7c33,13ch 11ch 0#cc7c33,14ch 11ch 0#a86727,15ch 11ch 0#ffffff,16ch 11ch 0#ffffff,0ch 12ch 0#ebe3e0,1ch 12ch 0#b0acab,2ch 12ch 0#a86727,3ch 12ch 0#a86727,4ch 12ch 0#a86727,5ch 12ch 0#a86727,6ch 12ch 0#764719,7ch 12ch 0#a86727,8ch 12ch 0#cc7c33,9ch 12ch 0#ffffff,10ch 12ch 0#cc7c33,11ch 12ch 0#cc7c33,12ch 12ch 0#cc7c33,13ch 12ch 0#cc7c33,14ch 12ch 0#a86727,15ch 12ch 0#ffffff,16ch 12ch 0#ffffff,0ch 13ch 0#ebe3e0,1ch 13ch 0#b0acab,2ch 13ch 0#a86727,3ch 13ch 0#a86727,4ch 13ch 0#a86727,5ch 13ch 0#a86727,6ch 13ch 0#a86727,7ch 13ch 0#cc7c33,8ch 13ch 0#cc7c33,9ch 13ch 0#cc7c33,10ch 13ch 0#ffffff,11ch 13ch 0#ffffff,12ch 13ch 0#ffffff,13ch 13ch 0#a86727,14ch 13ch 0#ffffff,15ch 13ch 0#ffffff,16ch 13ch 0#ffffff,0ch 14ch 0#ebe3e0,1ch 14ch 0#b0acab,2ch 14ch 0#a86727,3ch 14ch 0#a86727,4ch 14ch 0#764719,5ch 14ch 0#a86727,6ch 14ch 0#a86727,7ch 14ch 0#a86727,8ch 14ch 0#cc7c33,9ch 14ch 0#cc7c33,10ch 14ch 0#cc7c33,11ch 14ch 0#cc7c33,12ch 14ch 0#cc7c33,13ch 14ch 0#a86727,14ch 14ch 0#ffffff,15ch 14ch 0#ffffff,16ch 14ch 0#ffffff,0ch 15ch 0#ebe3e0,1ch 15ch 0#ebe3e0,2ch 15ch 0#b0acab,3ch 15ch 0#a86727,4ch 15ch 0#a86727,5ch 15ch 0#764719,6ch 15ch 0#764719,7ch 15ch 0#cc7c33,8ch 15ch 0#a86727,9ch 15ch 0#a86727,10ch 15ch 0#cc7c33,11ch 15ch 0#cc7c33,12ch 15ch 0#cc7c33,13ch 15ch 0#a86727,14ch 15ch 0#ffffff,15ch 15ch 0#ffffff,16ch 15ch 0#ffffff,0ch 16ch 0#ebe3e0,1ch 16ch 0#ebe3e0,2ch 16ch 0#b0acab,3ch 16ch 0#a86727,4ch 16ch 0#a86727,5ch 16ch 0#a86727,6ch 16ch 0#a86727,7ch 16ch 0#b0acab,8ch 16ch 0#b0acab,9ch 16ch 0#b0acab,10ch 16ch 0#b0acab,11ch 16ch 0#b0acab,12ch 16ch 0#b0acab,13ch 16ch 0#ffffff,14ch 16ch 0#a86727,15ch 16ch 0#a86727,16ch 16ch 0#a86727,0ch 17ch 0#ebe3e0,1ch 17ch 0#ebe3e0,2ch 17ch 0#ebe3e0,3ch 17ch 0#b0acab,4ch 17ch 0#b0acab,5ch 17ch 0#b0acab,6ch 17ch 0#b0acab,7ch 17ch 0#b0acab,8ch 17ch 0#ebe3e0,9ch 17ch 0#ebe3e0,10ch 17ch 0#ebe3e0,11ch 17ch 0#ebe3e0,12ch 17ch 0#b0acab,13ch 17ch 0#ffffff,14ch 17ch 0#a86727,15ch 17ch 0#cc7c33,16ch 17ch 0#cc7c33;`;\n  console.log(\"%c█\", styles);\n  console.log(\n    `%c${name} v${version} by Matnard`,\n    \"background-color: black; padding: 0.75em; color:white; font-family: sans-serif; font-weight: 300;\"\n  );\n}\n","const batchLoad = function(promises, onProgress) {\n  const count = promises.length;\n  let resolved = 0;\n  promises.forEach(p => {\n    p.then(function() {\n      resolved++;\n      onProgress(resolved / count);\n    });\n  });\n\n  return Promise.all(promises);\n};\n\nconst loadAsset = function(arg) {\n  if (typeof arg === \"string\") {\n    arg = {\n      url: arg\n    };\n  }\n\n  const { url, mimeType } = arg;\n\n  return fetch(url)\n    .then(res => res.blob())\n    .then(blob => {\n      const type = mimeType || blob.type;\n\n      const thenFn = {\n        \"image/png\": blobToImg,\n        \"model/gltf+json\": blobToJson,\n        \"text/html\": blobToText\n      }[type];\n\n      return thenFn(blob);\n    })\n    .then(result => {\n      const asset = {};\n      asset[url] = result;\n      return asset;\n    });\n};\n\nconst blobToText = blob => {\n  return new Promise(function(resolve, reject) {\n    const fr = new FileReader();\n    fr.onload = function() {\n      resolve(this.result);\n    };\n    fr.onerror = function(err) {\n      reject(err);\n    };\n    fr.readAsText(blob);\n  });\n};\n\nconst blobToJson = blob => {\n  return new Promise(function(resolve, reject) {\n    const fr = new FileReader();\n    fr.onload = function() {\n      resolve(JSON.parse(this.result));\n    };\n    fr.onerror = function(err) {\n      reject(err);\n    };\n    fr.readAsText(blob);\n  });\n};\n\nconst blobToImg = blob => {\n  var url = URL.createObjectURL(blob);\n  var img = new Image();\n  img.src = url;\n  return img;\n};\n\nclass Loader {\n  constructor(conf) {\n    this.onProgress = conf.onProgress;\n    this.loaders = conf.assets.map(x => loadAsset(x)) || [];\n    this.waitingScreen = document.createElement(\"div\");\n    this.waitingScreen.style.backgroundColor = \"rgba(0,0,0,1)\";\n    this.waitingScreen.style.width = \"100%\";\n    this.waitingScreen.style.height = \"100vh\";\n    this.waitingScreen.style.position = \"fixed\";\n    this.waitingScreen.style.zIndex = \"1000\";\n    this.waitingScreen.style.display = \"flex\";\n    this.waitingScreen.style.justifyContent = \"center\";\n    this.waitingScreen.style.alignItems = \"center\";\n\n    this.logo = document.createElement(\"img\");\n    this.logo.style.width = \"50px\";\n    this.logo.src = \"https://matnard.github.io/NardGL/images/profile-51.png\";\n    this.waitingScreen.appendChild(this.logo);\n\n    document.body.appendChild(this.waitingScreen);\n  }\n\n  add(asset) {\n    this.loaders.push(loadAsset(asset));\n    return this;\n  }\n\n  addArray(assetUrls) {\n    this.loaders = this.loaders.concat(assetUrls.map(x => loadAsset(x)));\n    return this;\n  }\n\n  start() {\n    return batchLoad(this.loaders, progress => {\n      this.waitingScreen.style.backgroundColor = `rgba(0,0,0,${1 - progress})`;\n      this.onProgress(progress);\n    }).then(data => {\n      document.body.removeChild(this.waitingScreen);\n      return data.reduce((a, b) => {\n        a[Object.keys(b)[0]] = b[Object.keys(b)[0]];\n        return a;\n      }, {});\n    });\n  }\n}\n\nexport { batchLoad, loadAsset, Loader };\n","const createShader = function(gl, type, source) {\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (success) {\n    return shader;\n  }\n\n  console.log(gl.getShaderInfoLog(shader));\n  gl.deleteShader(shader);\n};\n\nconst createProgram = function(gl, vertexShader, fragmentShader) {\n  const program = gl.createProgram();\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (success) {\n    return program;\n  }\n\n  console.log(gl.getProgramInfoLog(program));\n  gl.deleteProgram(program);\n};\n\nconst createProgramFromSource = function(\n  gl,\n  vertexShaderSrc,\n  fragmentShaderSrc\n) {\n  const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSrc);\n  const fragmentShader = createShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSrc\n  );\n\n  return createProgram(gl, vertexShader, fragmentShader);\n};\n\nconst resizeCanvas = function(canvas) {\n  // Lookup the size the browser is displaying the canvas.\n  var displayWidth = canvas.clientWidth;\n  var displayHeight = canvas.clientHeight;\n\n  // Check if the canvas is not the same size.\n  if (canvas.width !== displayWidth || canvas.height !== displayHeight) {\n    // Make the canvas the same size\n    canvas.width = displayWidth;\n    canvas.height = displayHeight;\n  }\n};\n\nconst randomInt = function(range) {\n  return Math.floor(Math.random() * range);\n};\n\nconst getSize = function(type) {\n  return {\n    SCALAR: 1,\n    VEC2: 2,\n    VEC3: 3,\n    VEC4: 4,\n    MAT2: 4,\n    MAT3: 9,\n    MAT4: 16\n  }[type];\n};\n\nconst getGLSLType = function(componentType, type) {\n  const size = getSize(type);\n  return {\n    5126: function(size) {\n      return {\n        1: \"float\",\n        2: \"vec2\",\n        3: \"vec3\",\n        4: \"vec4\"\n      }[size];\n    },\n    5123: function(size) {\n      return {\n        1: \"int\",\n        2: \"ivec2\",\n        3: \"ivec3\",\n        4: \"ivec4\"\n      }[size];\n    }\n  }[componentType](size);\n};\n\nconst getTypedArray = function(srcData, componentType) {\n  return new {\n    5126: Float32Array,\n    5123: Uint16Array\n  }[componentType](srcData);\n};\n\nexport {\n  randomInt,\n  resizeCanvas,\n  createProgram,\n  createShader,\n  createProgramFromSource,\n  getSize,\n  getTypedArray,\n  getGLSLType\n};\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {mat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {mat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {mat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {mat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {mat2} L the lower triangular matrix\r\n * @param {mat2} D the diagonal matrix\r\n * @param {mat2} U the upper triangular matrix\r\n * @param {mat2} a the input matrix to factorize\r\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n *\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty,\r\n *  0, 0, 1]\r\n * </pre>\r\n * The last row is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {mat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {mat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {mat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {mat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);\n}\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n;\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q quaternion\r\n * @param {vec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {vec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {mat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nexport var getReal = quat.copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport var setReal = quat.copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {quat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {quat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat} q quaternion to rotate by\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {vec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = quat.dot;\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nexport var length = quat.length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {quat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat2} a the first dual quaternion.\r\n * @param {quat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat2} a the first dual quat.\r\n * @param {quat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","import { vec3, mat4 } from \"gl-matrix\";\n\nfunction reduceArgsWithFn(fn, input) {\n  return function() {\n    return [...arguments].reduce((a, b) => {\n      return fn(a, b);\n    }, input);\n  };\n}\n\nfunction translation(x, y, z) {\n  return mat4.fromTranslation(mat4.create(), vec3.fromValues(x, y, z));\n}\n\nfunction rotationX(rad) {\n  return mat4.fromXRotation(mat4.create(), rad);\n}\n\nfunction rotationY(rad) {\n  return mat4.fromYRotation(mat4.create(), rad);\n}\nfunction rotationZ(rad) {\n  return mat4.fromZRotation(mat4.create(), rad);\n}\n\nfunction scaling(x, y, z) {\n  return mat4.fromScaling(mat4.create(), vec3.fromValues(x, y, z));\n}\n\nfunction identity() {\n  return mat4.create();\n}\n\nfunction projection(width, height, depth) {\n  return mat4.perspective(mat4.create(), 45, width / height, 0.1, 40);\n}\n\nfunction multiply(a, b) {\n  return mat4.multiply(mat4.create(), a, b);\n}\n\nconst multiplyAll = reduceArgsWithFn(multiply, mat4.create());\n\nconst m4 = {\n  projection,\n  translation,\n  scaling,\n  multiply,\n  multiplyAll,\n  identity,\n\n  invert: function(m) {\n    return mat4.invert(mat4.create(), m);\n  },\n\n  translate: function(m, tx, ty, tz) {\n    return m4.multiply(m, m4.translation(tx, ty, tz));\n  },\n\n  rotateX: function(m, angleInRadians) {\n    return m4.multiply(m, rotationX(angleInRadians));\n  },\n\n  rotateY: function(m, angleInRadians) {\n    return m4.multiply(m, rotationY(angleInRadians));\n  },\n\n  rotateZ: function(m, angleInRadians) {\n    return m4.multiply(m, rotationZ(angleInRadians));\n  },\n\n  scale: function(m, sx, sy, sz) {\n    return m4.multiply(m, m4.scaling(sx, sy, sz));\n  }\n};\n\nexport { m4 };\n","import { m4 } from \"../m4\";\n\nclass Transform {\n  constructor() {\n    this.matrix = m4.identity();\n\n    this.translation = {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n\n    this.rotation = {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n\n    this.scale = {\n      x: 1,\n      y: 1,\n      z: 1\n    };\n  }\n\n  computeMatrix(m = m4.identity()) {\n    let transforms = m4.identity();\n    transforms = m4.translate(\n      transforms,\n      this.translation.x,\n      this.translation.y,\n      this.translation.z\n    );\n    transforms = m4.rotateX(transforms, this.rotation.x);\n    transforms = m4.rotateY(transforms, this.rotation.y);\n    transforms = m4.rotateZ(transforms, this.rotation.z);\n\n    transforms = m4.scale(transforms, this.scale.x, this.scale.y, this.scale.z);\n\n    this.matrix = m4.multiply(m, transforms);\n  }\n}\n\nclass CameraTransform extends Transform {\n  computeMatrix(m = m4.identity()) {\n    let transforms = m4.identity();\n\n    transforms = m4.scale(transforms, this.scale.x, this.scale.y, this.scale.z);\n\n    transforms = m4.rotateX(transforms, this.rotation.x);\n    transforms = m4.rotateY(transforms, this.rotation.y);\n    transforms = m4.rotateZ(transforms, this.rotation.z);\n\n    transforms = m4.translate(\n      transforms,\n      this.translation.x,\n      this.translation.y,\n      this.translation.z\n    );\n    this.matrix = m4.multiply(m, transforms);\n  }\n}\n\nexport { Transform, CameraTransform };\n","import { CameraTransform as Transform } from \"../Transform\";\nimport { m4 } from \"../m4\";\n\nclass Camera {\n  constructor() {\n    this.transform = new Transform();\n  }\n\n  get matrix() {\n    return this.transform.matrix;\n  }\n\n  get translation() {\n    return this.transform.translation;\n  }\n\n  get rotation() {\n    return this.transform.rotation;\n  }\n\n  get scale() {\n    return this.transform.scale;\n  }\n\n  get viewMatrix() {\n    this.computeMatrix();\n    return m4.invert(this.transform.matrix);\n  }\n\n  computeMatrix() {\n    this.transform.computeMatrix();\n  }\n}\n\nexport { Camera };\n","import { resizeCanvas } from \"./utils\";\nimport { m4 } from \"./m4\";\nimport { Camera } from \"./Camera\";\n\nclass WebGLRenderer {\n  constructor(canvas = document.createElement(\"canvas\")) {\n    const gl = canvas.getContext(\"webgl2\");\n\n    //Create full bleed canvas if no canvas provided\n    if (canvas.parentNode !== document.body) {\n      gl.canvas.style.width = \"100vw\";\n      gl.canvas.style.height = \"100vh\";\n      document.body.style.overflow = \"hidden\";\n      document.body.style.margin = 0;\n      document.body.appendChild(gl.canvas);\n    }\n\n    this.gl = gl;\n    this.scene = []; //\n    this.camera = new Camera();\n    this.projectionMatrix = m4.projection(\n      this.gl.canvas.clientWidth,\n      this.gl.canvas.clientHeight,\n      this.gl.canvas.clientWidth\n    );\n    this.init();\n    this.startAnimating();\n  }\n\n  startAnimating(fps = 60) {\n    this.fpsInterval = 1000 / fps;\n    this.then = Date.now();\n    this.startTime = this.then;\n    this.render();\n  }\n\n  init() {}\n\n  beforeDraw(dt) {\n    this.scene.forEach(s => {\n      s.beforeDraw(dt);\n    });\n  }\n\n  drawFrame(dt) {\n    const gl = this.gl;\n\n    this.scene.forEach(primitive => {\n      gl.useProgram(primitive.program);\n\n      if (!primitive.hasRenderedOnce) {\n        primitive.updateUniforms();\n        primitive.hasRenderedOnce = true;\n      }\n\n      gl.bindVertexArray(primitive.vao);\n\n      this.beforeDraw(dt);\n      primitive.setUniform(\"u_projectionMatrix\", this.projectionMatrix);\n      primitive.setUniform(\"u_viewMatrix\", this.camera.viewMatrix);\n      primitive.computeMatrix();\n      primitive.beforeDraw(dt);\n\n      primitive.updateUniforms();\n\n      const drawConf = {\n        primitiveType:\n          primitive.draw.primitiveType !== \"undefined\"\n            ? primitive.draw.primitiveType\n            : gl.TRIANGLES,\n        offset: primitive.draw.offset,\n        count: primitive.draw.count\n      };\n\n      if (primitive.indices) {\n        gl.drawElements(\n          gl.TRIANGLES,\n          primitive.indices.srcData.length,\n          gl.UNSIGNED_SHORT,\n          0\n        );\n      } else {\n        gl.drawArrays(drawConf.primitiveType, drawConf.offset, drawConf.count);\n      }\n    });\n  }\n\n  render() {\n    const gl = this.gl;\n    requestAnimationFrame(() => this.render());\n    this.now = Date.now();\n    this.elapsed = this.now - this.then;\n\n    if (this.elapsed > this.fpsInterval) {\n      resizeCanvas(gl.canvas);\n      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n      gl.clearColor(1, 1, 1, 1);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n      // turn on depth testing\n      gl.enable(gl.DEPTH_TEST);\n      this.drawFrame(this.then);\n\n      this.then = this.now - (this.elapsed % this.fpsInterval);\n    }\n  }\n}\n\nexport { WebGLRenderer };\n","class Uniform {\n  constructor(conf) {\n    for (var key in conf) {\n      this[key] = conf[key];\n    }\n  }\n\n  bind(gl, program) {\n    this.gl = gl;\n    this.program = program;\n    return this;\n  }\n\n  check() {\n    if (!this.gl || !this.program) {\n      throw new Error(\"Uniform needs to be bound to context and program\");\n    }\n  }\n\n  toGLSL() {\n    const getType = type =>\n      ({\n        \"1f\": \"float\",\n        \"1fv\": \"float\",\n        \"2f\": \"vec2\",\n        \"2fv\": \"vec2\",\n        \"3f\": \"vec3\",\n        \"3fv\": \"vec3\",\n        \"4f\": \"vec4\",\n        \"4fv\": \"vec4\",\n        Matrix2fv: \"mat2\",\n        Matrix3fv: \"mat3\",\n        Matrix4fv: \"mat4\",\n        \"1i\": \"int\",\n        \"1iv\": \"int\",\n        \"2i\": \"ivec2\",\n        \"2iv\": \"ivec2\",\n        \"3i\": \"ivec3\",\n        \"3iv\": \"ivec3\",\n        \"4i\": \"ivec4\",\n        \"4iv\": \"ivec4\",\n        \"1u\": \"uint\",\n        \"1uv\": \"uint\",\n        \"2u\": \"uvec2\",\n        \"2uv\": \"uvec2\",\n        \"3u\": \"uvec3\",\n        \"3uv\": \"uvec3\",\n        \"4u\": \"uvec4\",\n        \"4uv\": \"uvec4\"\n      }[type]);\n\n    return `uniform ${getType(this.type)} ${this.name}${\n      this.count > 2 ? `[${this.count}];\\n` : `;\\n`\n    }`;\n  }\n\n  getLocation() {\n    this.check();\n    return this.gl.getUniformLocation(this.program, this.name);\n  }\n\n  update(data = this.value) {\n    this.check();\n    this.passUniforms({\n      location: this.getLocation(),\n      type: this.type,\n      data: [data]\n    });\n  }\n\n  passUniforms(options) {\n    this.check();\n    const gl = this.gl;\n    const { location, data, type } = options;\n\n    try {\n      gl[`uniform${type}`];\n    } catch (err) {\n      throw err;\n    }\n    //console.log(type, location, data);\n    switch (type) {\n      case \"Matrix2fv\":\n      case \"Matrix2x3fv\":\n      case \"Matrix2x4fv\":\n      case \"Matrix3fv\":\n      case \"Matrix3x2fv\":\n      case \"Matrix3x4fv\":\n      case \"Matrix4fv\":\n      case \"Matrix4x2fv\":\n      case \"Matrix4x3fv\":\n        gl[`uniform${type}`](location, false, [...data[0]]);\n        break;\n\n      default:\n        gl[`uniform${type}`](location, ...data);\n    }\n  }\n}\n\nexport { Uniform };\n","import { getSize, getTypedArray, getGLSLType } from \"./utils\";\n\nclass Attribute {\n  constructor(conf) {\n    for (var key in conf) {\n      this[key] = conf[key];\n    }\n  }\n\n  bind(gl, program) {\n    this.gl = gl;\n    this.program = program;\n    return this;\n  }\n\n  toGLSL() {\n    return `in ${getGLSLType(this.componentType, this.type)} ${this.name};\\n`;\n  }\n\n  get location() {\n    const location = this.gl.getAttribLocation(this.program, this.name);\n    if (location === -1) {\n      throw new Error(\n        `Maybe not used in shader. Haven't fount the location of the variable name \"${\n          this.name\n        }\"`\n      );\n    }\n    return location;\n  }\n\n  get size() {\n    return getSize(this.type);\n  }\n\n  get array() {\n    return getTypedArray(this.srcData, this.componentType);\n  }\n}\n\nexport { Attribute };\n","import { Uniform } from \"../Uniform\";\nimport { Attribute } from \"../Attribute\";\n\nclass Material {\n  constructor(attributes, uniforms, vertexShader, fragmentShader) {\n    this.attributes = attributes.map(a => new Attribute(a));\n    this.uniforms = uniforms.map(u => new Uniform(u));\n\n    this.vertexShader = vertexShader;\n    this.fragmentShader = fragmentShader;\n  }\n}\n\nexport { Material };\n","import { Uniform } from \"./Uniform\";\n\nclass TextureUniform extends Uniform {\n  constructor(conf) {\n    super(conf);\n    this.type = \"1i\";\n    this.src = conf.src;\n  }\n\n  bind(gl, program) {\n    this.gl = gl;\n    this.program = program;\n    this.texture = this.loadTexture(gl, this.src);\n    return this;\n  }\n\n  toGLSL() {\n    return `uniform sampler2D ${this.name};`;\n  }\n\n  loadTexture(gl, path) {\n    var texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    // Fill the texture with a 1x1 blue pixel.\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGBA,\n      1,\n      1,\n      0,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      new Uint8Array([0, 0, 0, 0.2])\n    );\n\n    // Asynchronously load an image\n    var image = new Image();\n    image.src = path;\n    image.addEventListener(\"load\", function() {\n      // Now that the image has loaded make copy it to the texture.\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        gl.RGBA,\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        image\n      );\n      gl.generateMipmap(gl.TEXTURE_2D);\n    });\n\n    return texture;\n  }\n\n  beforeDraw(dt) {\n    // Tell WebGL we want to affect texture unit 0\n    this.gl.activeTexture(this.gl.TEXTURE0);\n\n    // Bind the texture to texture unit 0\n    debugger;\n    this.gl.bindTexture(this.gl.TEXTURE_2D, texture);\n\n    // Tell the shader we bound the texture to texture unit 0\n    this.gl.uniform1i(programInfo.uniformLocations.u_texture, 0);\n  }\n}\n\nexport { TextureUniform };\n","import { getGLSLType } from \"../utils\";\n\nclass Shader {\n  constructor(conf) {\n    this.attributes = conf.attributes;\n    this.uniforms = conf.uniforms;\n    this.script = conf.script;\n  }\n\n  get decorated() {\n    throw new Error(\"Use either VertexShader or FragmentShader instances\");\n  }\n}\n\nclass VertexShader extends Shader {\n  get decorated() {\n    return (\n      \"#version 300 es\\n\" +\n      \"precision mediump float;\\n\" +\n      this.attributes.map(a => a.toGLSL()).join(\"\") +\n      \"\\n\" +\n      this.uniforms.map(u => u.toGLSL()).join(\"\") +\n      \"\\n\" +\n      `${this.script}`\n    );\n  }\n}\n\nclass FragmentShader extends Shader {\n  get decorated() {\n    return (\n      \"#version 300 es\\n\" +\n      \"precision mediump float;\\n\" +\n      this.uniforms.map(u => u.toGLSL()).join(\"\") +\n      \"\\n\" +\n      `${this.script}`\n    );\n  }\n}\n\nexport { Shader, VertexShader, FragmentShader };\n","import { Material } from \"../index\";\nimport { Attribute } from \"../../Attribute\";\nimport { Uniform } from \"../../Uniform\";\nimport { TextureUniform } from \"../../TextureUniform\";\nimport { VertexShader, FragmentShader } from \"../../Shader\";\nimport { m4 } from \"../../m4\";\nimport { createProgramFromSource } from \"../../utils\";\n\nclass BasicMaterial extends Material {\n  constructor(\n    attributesData,\n    uniformsData,\n    texturesData = [],\n    vertexShaderPartial,\n    fragmentShaderPartial\n  ) {\n    const extraUniforms = [\n      {\n        name: \"u_modelMatrix\",\n        type: \"Matrix4fv\",\n        value: m4.identity(),\n        count: 1\n      },\n      {\n        name: \"u_viewMatrix\",\n        type: \"Matrix4fv\",\n        value: m4.identity(),\n        count: 1\n      },\n      {\n        name: \"u_projectionMatrix\",\n        type: \"Matrix4fv\",\n        value: m4.identity(),\n        count: 1\n      }\n    ];\n\n    uniformsData = [...uniformsData, ...extraUniforms];\n\n    super(\n      attributesData,\n      uniformsData,\n      vertexShaderPartial,\n      fragmentShaderPartial\n    );\n    this.attributes = attributesData.map(a => new Attribute(a));\n    this.uniforms = uniformsData.map(u => new Uniform(u));\n    this.uniforms = [\n      ...this.uniforms,\n      ...texturesData.map(t => new TextureUniform(t))\n    ];\n    this.vertexShaderSrc = new VertexShader({\n      attributes: this.attributes,\n      uniforms: this.uniforms,\n      script: vertexShaderPartial\n    }).decorated;\n    this.fragmentShaderSrc = new FragmentShader({\n      uniforms: this.uniforms,\n      script: fragmentShaderPartial\n    }).decorated;\n  }\n\n  createProgram(gl) {\n    return createProgramFromSource(\n      gl,\n      this.vertexShaderSrc,\n      this.fragmentShaderSrc\n    );\n  }\n\n  bindUniforms(gl, program) {\n    return this.uniforms.concat([]).map(uniform => uniform.bind(gl, program));\n  }\n\n  bindAttributes(gl, program) {\n    return this.attributes\n      .concat([])\n      .map(attribute => attribute.bind(gl, program));\n  }\n}\n\nexport { BasicMaterial };\n","import { BasicMaterial } from \"../BasicMaterial\";\n\nclass PbrMetallicRoughnessMaterial extends BasicMaterial {\n  constructor(\n    attributes,\n    uniforms,\n    texturesData = [],\n    vertexShaderPartial,\n    fragmentShaderPartial\n  ) {\n    super(\n      attributes,\n      uniforms,\n      texturesData,\n      vertexShaderPartial,\n      fragmentShaderPartial\n    );\n  }\n}\n\nexport { PbrMetallicRoughnessMaterial };\n","import { Transform } from \"../Transform\";\n\nclass Primitive {\n  constructor(gl, conf) {\n    this.gl = gl;\n    //stuff to access\n    this.vao = null;\n    this.hasRenderedOnce = false;\n\n    this.program = conf.material.createProgram(this.gl);\n\n    this.material = conf.material;\n    this.uniforms = this.material.bindUniforms(this.gl, this.program);\n    this.attributes = this.material.bindAttributes(this.gl, this.program);\n    this.indices = conf.indices || null;\n    //draw stuff\n    this.draw = conf.draw || {\n      primitiveType: 4,\n      offset: 0,\n      count: 3\n    };\n    this.draw.count = conf.count;\n    this.transform = new Transform();\n    this.init();\n  }\n\n  get matrix() {\n    return this.transform.matrix;\n  }\n\n  get translation() {\n    return this.transform.translation;\n  }\n\n  get rotation() {\n    return this.transform.rotation;\n  }\n\n  get scale() {\n    return this.transform.scale;\n  }\n\n  computeMatrix(m) {\n    this.transform.computeMatrix(m);\n  }\n\n  setUniform(name, data) {\n    this.uniforms.find(u => u.name === name).value = data;\n  }\n\n  updateUniform(name, value) {\n    this.uniforms.find(u => u.name === name).update(value);\n  }\n\n  updateUniforms() {\n    this.uniforms.forEach(uniform => {\n      uniform.update();\n    });\n  }\n\n  beforeDraw(dt) {}\n\n  init() {\n    const gl = this.gl;\n\n    this.vao = gl.createVertexArray();\n    gl.bindVertexArray(this.vao);\n\n    this.attributes.forEach(attribute => {\n      if (!!attribute.srcData) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n        gl.bufferData(gl.ARRAY_BUFFER, attribute.array, gl.STATIC_DRAW);\n      }\n\n      const conf = {\n        location: attribute.location,\n        size: attribute.size,\n        type: attribute.componentType,\n        normalize: true,\n        stride: attribute.stride,\n        offset: attribute.offset\n      };\n\n      if (this.indices) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\n        const elementsConf = {\n          target: gl.ELEMENT_ARRAY_BUFFER,\n          srcData: new Uint16Array(this.indices.srcData),\n          usage: gl.STATIC_DRAW\n        };\n        gl.bufferData(\n          elementsConf.target,\n          elementsConf.srcData,\n          elementsConf.usage\n        );\n      }\n\n      gl.vertexAttribPointer(\n        conf.location,\n        conf.size,\n        conf.type,\n        conf.normalize,\n        conf.stride,\n        conf.offset\n      );\n\n      gl.enableVertexAttribArray(attribute.location);\n    });\n  }\n}\n\nexport { Primitive };\n","import { Primitive } from \"./index\";\nimport { PbrMetallicRoughnessMaterial } from \"../Material/PbrMetallicRoughnessMaterial\";\n\nclass GltfPrimitive extends Primitive {\n  constructor(\n    gl,\n    primitiveData,\n    textureData = [],\n    vertexPartial,\n    fragmentPartial\n  ) {\n    const material = new PbrMetallicRoughnessMaterial(\n      primitiveData.attributes,\n      [],\n      textureData,\n      vertexPartial,\n      fragmentPartial\n    );\n    const conf = {\n      count: primitiveData.attributes[0].count, //POSITION, maybe..\n      material,\n      indices: primitiveData.indices\n    };\n    super(gl, conf);\n  }\n}\n\nexport { GltfPrimitive };\n","import { WebGLRenderer } from \"./WebGLRenderer\";\n\nexport * from \"./Camera\";\nexport * from \"./Material\";\nexport * from \"./Material/BasicMaterial\";\nexport * from \"./Material/PbrMetallicRoughnessMaterial\";\nexport * from \"./Primitive\";\nexport * from \"./Primitive/GltfPrimitive\";\nexport * from \"./Shader\";\nexport * from \"./Transform\";\nexport * from \"./Attribute\";\nexport * from \"./m4\";\nexport * from \"./TextureUniform\";\nexport * from \"./Uniform\";\nexport * from \"./utils\";\nexport { WebGLRenderer };\n","class GltfParser {\n  constructor(gltf) {\n    gltf.buffers.forEach(b => {\n      b.data = this.parseB64Buffer(b);\n    });\n\n    gltf.accessors.forEach((accessor, i) => {\n      let itemsPerType = this.getItemsPerType(accessor.type);\n\n      let elementBytesLength = this.getComponentArrayType(\n        accessor.componentType\n      ).BYTES_PER_ELEMENT;\n\n      let typedGetter = this.getDvMethodToRun(accessor.componentType);\n      const length = itemsPerType * accessor.count;\n\n      accessor.srcData = this.unpackBufferViewData(\n        gltf,\n        length,\n        elementBytesLength,\n        typedGetter,\n        accessor.bufferView\n      );\n\n      //console.log(accessor.data.map(d => d.toFixed(1)));\n    });\n\n    if (gltf.images) {\n      gltf.images.forEach(image => {\n        const elementBytesLength = 1;\n        const typedGetter = \"getUint8\";\n        const length = gltf.bufferViews[image.bufferView].byteLength;\n\n        image.srcData = this.unpackBufferViewData(\n          gltf,\n          length,\n          elementBytesLength,\n          typedGetter,\n          image.bufferView\n        );\n\n        image.src = this.uint8ToUrl(image.srcData, image.mimeType);\n      });\n    }\n\n    if (gltf.materials) {\n      gltf.materials.forEach(material => {\n        const textureId = material.pbrMetallicRoughness.baseColorTexture.index;\n        const texture = gltf.images[gltf.textures[textureId].source].src;\n        const uvsAttributeName = `TEXTCOORD_${\n          material.pbrMetallicRoughness.baseColorTexture.texCoord\n        }`;\n        material.pbrMetallicRoughness.baseColorTexture.texture = texture;\n        material.pbrMetallicRoughness.baseColorTexture.uvsAttributeName = uvsAttributeName;\n      });\n    }\n    //console.log(gltf);\n    this.gltf = gltf;\n  }\n\n  parseB64Buffer(buffer) {\n    let b64 = buffer.uri;\n\n    let byteCharacters = atob(b64.split(\",\")[1]);\n    let dv = new DataView(new ArrayBuffer(byteCharacters.length));\n\n    Array.from(byteCharacters).forEach((char, i) => {\n      dv.setUint8(i, char.charCodeAt(0));\n    });\n\n    return dv;\n  }\n\n  unpackBufferViewData(\n    gltf,\n    length,\n    elementBytesLength,\n    typedGetter,\n    bufferView\n  ) {\n    let bufferId = gltf.bufferViews[bufferView].buffer;\n    let offset = gltf.bufferViews[bufferView].byteOffset;\n\n    let dv = gltf.buffers[bufferId].data;\n    return Array.from({\n      length\n    }).map((el, i) => {\n      var loopOffset = offset + Math.max(0, elementBytesLength * i);\n      return dv[typedGetter](loopOffset, true);\n    });\n  }\n\n  getComponentArrayType(id) {\n    return {\n      5123: Uint16Array,\n      5126: Float32Array\n    }[id];\n  }\n\n  getDvMethodToRun(id) {\n    return {\n      5123: \"getUint16\",\n      5126: \"getFloat32\"\n    }[id];\n  }\n\n  getItemsPerType(type) {\n    return {\n      SCALAR: 1,\n      VEC2: 2,\n      VEC3: 3,\n      VEC4: 4\n    }[type];\n  }\n\n  //mesh > primitives > material.pbrMetallicRoughness.baseColorTexture > texture > images\n  getPrimitives(meshId = 0) {\n    //from mesh id\n    const primitives = this.gltf.meshes[meshId].primitives;\n\n    primitives.forEach(primitive => {\n      primitive.attributes = Object.keys(primitive.attributes).map(name => ({\n        name,\n        ...this.gltf.accessors[primitive.attributes[name]]\n      }));\n      primitive.indices = { ...this.gltf.accessors[primitive.indices] };\n      if (typeof primitive.material !== \"undefined\") {\n        primitive.material = this.gltf.materials[primitive.material];\n      }\n    });\n    return primitives;\n  }\n\n  uint8ToUrl(byteArray, type) {\n    var data = new Uint8Array(byteArray);\n    var blob = new Blob([data], { type });\n    return URL.createObjectURL(blob);\n  }\n}\n\nexport { GltfParser };\n","module.exports=\"#define GLSLIFY 1\\nin vec4 color;\\nout vec4 finalColor;\\n\\nvoid main(void){\\n\\tfinalColor = vec4(color.rgb, 1.0);\\n}\";","module.exports=\"#define GLSLIFY 1\\nout lowp vec4 color;\\t//Color to send to fragment shader.\\n\\nvoid main(void){\\n\\n\\tgl_Position = u_projectionMatrix * u_viewMatrix * u_modelMatrix * vec4(a_position, 1.0);\\n\\tcolor = vec4(u_colors[ int(a_colors) ], 1.0); //Using the 4th float as a color index.\\n}\";","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {mat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {mat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {mat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {mat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {mat2} L the lower triangular matrix\r\n * @param {mat2} D the diagonal matrix\r\n * @param {mat2} U the upper triangular matrix\r\n * @param {mat2} a the input matrix to factorize\r\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n *\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty,\r\n *  0, 0, 1]\r\n * </pre>\r\n * The last row is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {mat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {mat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {mat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {mat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);\n}\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n;\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q quaternion\r\n * @param {vec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {vec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {mat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nexport var getReal = quat.copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport var setReal = quat.copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {quat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {quat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat} q quaternion to rotate by\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {vec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = quat.dot;\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nexport var length = quat.length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {quat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat2} a the first dual quaternion.\r\n * @param {quat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat2} a the first dual quat.\r\n * @param {quat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","import { vec3, mat4 } from \"gl-matrix\";\n\nfunction reduceArgsWithFn(fn, input) {\n  return function() {\n    return [...arguments].reduce((a, b) => {\n      return fn(a, b);\n    }, input);\n  };\n}\n\nfunction translation(x, y, z) {\n  return mat4.fromTranslation(mat4.create(), vec3.fromValues(x, y, z));\n}\n\nfunction rotationX(rad) {\n  return mat4.fromXRotation(mat4.create(), rad);\n}\n\nfunction rotationY(rad) {\n  return mat4.fromYRotation(mat4.create(), rad);\n}\nfunction rotationZ(rad) {\n  return mat4.fromZRotation(mat4.create(), rad);\n}\n\nfunction scaling(x, y, z) {\n  return mat4.fromScaling(mat4.create(), vec3.fromValues(x, y, z));\n}\n\nfunction identity() {\n  return mat4.create();\n}\n\nfunction projection(width, height, depth) {\n  return mat4.perspective(mat4.create(), 45, width / height, 0.1, 40);\n}\n\nfunction multiply(a, b) {\n  return mat4.multiply(mat4.create(), a, b);\n}\n\nconst multiplyAll = reduceArgsWithFn(multiply, mat4.create());\n\nconst m4 = {\n  projection,\n  translation,\n  scaling,\n  multiply,\n  multiplyAll,\n  identity,\n\n  invert: function(m) {\n    return mat4.invert(mat4.create(), m);\n  },\n\n  translate: function(m, tx, ty, tz) {\n    return m4.multiply(m, m4.translation(tx, ty, tz));\n  },\n\n  rotateX: function(m, angleInRadians) {\n    return m4.multiply(m, rotationX(angleInRadians));\n  },\n\n  rotateY: function(m, angleInRadians) {\n    return m4.multiply(m, rotationY(angleInRadians));\n  },\n\n  rotateZ: function(m, angleInRadians) {\n    return m4.multiply(m, rotationZ(angleInRadians));\n  },\n\n  scale: function(m, sx, sy, sz) {\n    return m4.multiply(m, m4.scaling(sx, sy, sz));\n  }\n};\n\nexport { m4 };\n","import { m4 } from \"../m4\";\n\nclass Transform {\n  constructor() {\n    this.matrix = m4.identity();\n\n    this.translation = {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n\n    this.rotation = {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n\n    this.scale = {\n      x: 1,\n      y: 1,\n      z: 1\n    };\n  }\n\n  computeMatrix(m = m4.identity()) {\n    let transforms = m4.identity();\n    transforms = m4.translate(\n      transforms,\n      this.translation.x,\n      this.translation.y,\n      this.translation.z\n    );\n    transforms = m4.rotateX(transforms, this.rotation.x);\n    transforms = m4.rotateY(transforms, this.rotation.y);\n    transforms = m4.rotateZ(transforms, this.rotation.z);\n\n    transforms = m4.scale(transforms, this.scale.x, this.scale.y, this.scale.z);\n\n    this.matrix = m4.multiply(m, transforms);\n  }\n}\n\nclass CameraTransform extends Transform {\n  computeMatrix(m = m4.identity()) {\n    let transforms = m4.identity();\n\n    transforms = m4.scale(transforms, this.scale.x, this.scale.y, this.scale.z);\n\n    transforms = m4.rotateX(transforms, this.rotation.x);\n    transforms = m4.rotateY(transforms, this.rotation.y);\n    transforms = m4.rotateZ(transforms, this.rotation.z);\n\n    transforms = m4.translate(\n      transforms,\n      this.translation.x,\n      this.translation.y,\n      this.translation.z\n    );\n    this.matrix = m4.multiply(m, transforms);\n  }\n}\n\nexport { Transform, CameraTransform };\n","import { CameraTransform as Transform } from \"../Transform\";\nimport { m4 } from \"../m4\";\n\nclass Camera {\n  constructor() {\n    this.transform = new Transform();\n  }\n\n  get matrix() {\n    return this.transform.matrix;\n  }\n\n  get translation() {\n    return this.transform.translation;\n  }\n\n  get rotation() {\n    return this.transform.rotation;\n  }\n\n  get scale() {\n    return this.transform.scale;\n  }\n\n  get viewMatrix() {\n    this.computeMatrix();\n    return m4.invert(this.transform.matrix);\n  }\n\n  computeMatrix() {\n    this.transform.computeMatrix();\n  }\n}\n\nexport { Camera };\n","import { resizeCanvas } from \"./utils\";\nimport { m4 } from \"./m4\";\nimport { Camera } from \"./Camera\";\n\nclass WebGLRenderer {\n  constructor(canvas = document.createElement(\"canvas\")) {\n    const gl = canvas.getContext(\"webgl2\");\n\n    //Create full bleed canvas if no canvas provided\n    if (canvas.parentNode !== document.body) {\n      gl.canvas.style.width = \"100vw\";\n      gl.canvas.style.height = \"100vh\";\n      document.body.style.overflow = \"hidden\";\n      document.body.style.margin = 0;\n      document.body.appendChild(gl.canvas);\n    }\n\n    this.gl = gl;\n    this.scene = []; //\n    this.camera = new Camera();\n    this.projectionMatrix = m4.projection(\n      this.gl.canvas.clientWidth,\n      this.gl.canvas.clientHeight,\n      this.gl.canvas.clientWidth\n    );\n    this.init();\n    this.startAnimating();\n  }\n\n  startAnimating(fps = 60) {\n    this.fpsInterval = 1000 / fps;\n    this.then = Date.now();\n    this.startTime = this.then;\n    this.render();\n  }\n\n  init() {}\n\n  beforeDraw(dt) {\n    this.scene.forEach(s => {\n      s.beforeDraw(dt);\n    });\n  }\n\n  drawFrame(dt) {\n    const gl = this.gl;\n\n    this.scene.forEach(primitive => {\n      gl.useProgram(primitive.program);\n\n      if (!primitive.hasRenderedOnce) {\n        primitive.updateUniforms();\n        primitive.hasRenderedOnce = true;\n      }\n\n      gl.bindVertexArray(primitive.vao);\n\n      this.beforeDraw(dt);\n      primitive.setUniform(\"u_projectionMatrix\", this.projectionMatrix);\n      primitive.setUniform(\"u_viewMatrix\", this.camera.viewMatrix);\n      primitive.computeMatrix();\n      primitive.beforeDraw(dt);\n\n      primitive.updateUniforms();\n\n      const drawConf = {\n        primitiveType:\n          primitive.draw.primitiveType !== \"undefined\"\n            ? primitive.draw.primitiveType\n            : gl.TRIANGLES,\n        offset: primitive.draw.offset,\n        count: primitive.draw.count\n      };\n\n      if (primitive.indices) {\n        gl.drawElements(\n          gl.TRIANGLES,\n          primitive.indices.srcData.length,\n          gl.UNSIGNED_SHORT,\n          0\n        );\n      } else {\n        gl.drawArrays(drawConf.primitiveType, drawConf.offset, drawConf.count);\n      }\n    });\n  }\n\n  render() {\n    const gl = this.gl;\n    requestAnimationFrame(() => this.render());\n    this.now = Date.now();\n    this.elapsed = this.now - this.then;\n\n    if (this.elapsed > this.fpsInterval) {\n      resizeCanvas(gl.canvas);\n      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n      gl.clearColor(1, 1, 1, 1);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n      // turn on depth testing\n      gl.enable(gl.DEPTH_TEST);\n      this.drawFrame(this.then);\n\n      this.then = this.now - (this.elapsed % this.fpsInterval);\n    }\n  }\n}\n\nexport { WebGLRenderer };\n","import { getSize, getTypedArray, getGLSLType } from \"./utils\";\n\nclass Attribute {\n  constructor(conf) {\n    for (var key in conf) {\n      this[key] = conf[key];\n    }\n  }\n\n  bind(gl, program) {\n    this.gl = gl;\n    this.program = program;\n    return this;\n  }\n\n  toGLSL() {\n    return `in ${getGLSLType(this.componentType, this.type)} ${this.name};\\n`;\n  }\n\n  get location() {\n    const location = this.gl.getAttribLocation(this.program, this.name);\n    if (location === -1) {\n      throw new Error(\n        `Maybe not used in shader. Haven't fount the location of the variable name \"${\n          this.name\n        }\"`\n      );\n    }\n    return location;\n  }\n\n  get size() {\n    return getSize(this.type);\n  }\n\n  get array() {\n    return getTypedArray(this.srcData, this.componentType);\n  }\n}\n\nexport { Attribute };\n","import { Uniform } from \"../Uniform\";\nimport { Attribute } from \"../Attribute\";\n\nclass Material {\n  constructor(attributes, uniforms, vertexShader, fragmentShader) {\n    this.attributes = attributes.map(a => new Attribute(a));\n    this.uniforms = uniforms.map(u => new Uniform(u));\n\n    this.vertexShader = vertexShader;\n    this.fragmentShader = fragmentShader;\n  }\n}\n\nexport { Material };\n","import { Uniform } from \"./Uniform\";\n\nclass TextureUniform extends Uniform {\n  constructor(conf) {\n    super(conf);\n    this.type = \"1i\";\n    this.src = conf.src;\n  }\n\n  bind(gl, program) {\n    this.gl = gl;\n    this.program = program;\n    this.texture = this.loadTexture(gl, this.src);\n    return this;\n  }\n\n  toGLSL() {\n    return `uniform sampler2D ${this.name};`;\n  }\n\n  loadTexture(gl, path) {\n    var texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    // Fill the texture with a 1x1 blue pixel.\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGBA,\n      1,\n      1,\n      0,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      new Uint8Array([0, 0, 0, 0.2])\n    );\n\n    // Asynchronously load an image\n    var image = new Image();\n    image.src = path;\n    image.addEventListener(\"load\", function() {\n      // Now that the image has loaded make copy it to the texture.\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        gl.RGBA,\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        image\n      );\n      gl.generateMipmap(gl.TEXTURE_2D);\n    });\n\n    return texture;\n  }\n\n  beforeDraw(dt) {\n    // Tell WebGL we want to affect texture unit 0\n    this.gl.activeTexture(this.gl.TEXTURE0);\n\n    // Bind the texture to texture unit 0\n    debugger;\n    this.gl.bindTexture(this.gl.TEXTURE_2D, texture);\n\n    // Tell the shader we bound the texture to texture unit 0\n    this.gl.uniform1i(programInfo.uniformLocations.u_texture, 0);\n  }\n}\n\nexport { TextureUniform };\n","import { getGLSLType } from \"../utils\";\n\nclass Shader {\n  constructor(conf) {\n    this.attributes = conf.attributes;\n    this.uniforms = conf.uniforms;\n    this.script = conf.script;\n  }\n\n  get decorated() {\n    throw new Error(\"Use either VertexShader or FragmentShader instances\");\n  }\n}\n\nclass VertexShader extends Shader {\n  get decorated() {\n    return (\n      \"#version 300 es\\n\" +\n      \"precision mediump float;\\n\" +\n      this.attributes.map(a => a.toGLSL()).join(\"\") +\n      \"\\n\" +\n      this.uniforms.map(u => u.toGLSL()).join(\"\") +\n      \"\\n\" +\n      `${this.script}`\n    );\n  }\n}\n\nclass FragmentShader extends Shader {\n  get decorated() {\n    return (\n      \"#version 300 es\\n\" +\n      \"precision mediump float;\\n\" +\n      this.uniforms.map(u => u.toGLSL()).join(\"\") +\n      \"\\n\" +\n      `${this.script}`\n    );\n  }\n}\n\nexport { Shader, VertexShader, FragmentShader };\n","import { Material } from \"../index\";\nimport { Attribute } from \"../../Attribute\";\nimport { Uniform } from \"../../Uniform\";\nimport { TextureUniform } from \"../../TextureUniform\";\nimport { VertexShader, FragmentShader } from \"../../Shader\";\nimport { m4 } from \"../../m4\";\nimport { createProgramFromSource } from \"../../utils\";\n\nclass BasicMaterial extends Material {\n  constructor(\n    attributesData,\n    uniformsData,\n    texturesData = [],\n    vertexShaderPartial,\n    fragmentShaderPartial\n  ) {\n    const extraUniforms = [\n      {\n        name: \"u_modelMatrix\",\n        type: \"Matrix4fv\",\n        value: m4.identity(),\n        count: 1\n      },\n      {\n        name: \"u_viewMatrix\",\n        type: \"Matrix4fv\",\n        value: m4.identity(),\n        count: 1\n      },\n      {\n        name: \"u_projectionMatrix\",\n        type: \"Matrix4fv\",\n        value: m4.identity(),\n        count: 1\n      }\n    ];\n\n    uniformsData = [...uniformsData, ...extraUniforms];\n\n    super(\n      attributesData,\n      uniformsData,\n      vertexShaderPartial,\n      fragmentShaderPartial\n    );\n    this.attributes = attributesData.map(a => new Attribute(a));\n    this.uniforms = uniformsData.map(u => new Uniform(u));\n    this.uniforms = [\n      ...this.uniforms,\n      ...texturesData.map(t => new TextureUniform(t))\n    ];\n    this.vertexShaderSrc = new VertexShader({\n      attributes: this.attributes,\n      uniforms: this.uniforms,\n      script: vertexShaderPartial\n    }).decorated;\n    this.fragmentShaderSrc = new FragmentShader({\n      uniforms: this.uniforms,\n      script: fragmentShaderPartial\n    }).decorated;\n  }\n\n  createProgram(gl) {\n    return createProgramFromSource(\n      gl,\n      this.vertexShaderSrc,\n      this.fragmentShaderSrc\n    );\n  }\n\n  bindUniforms(gl, program) {\n    return this.uniforms.concat([]).map(uniform => uniform.bind(gl, program));\n  }\n\n  bindAttributes(gl, program) {\n    return this.attributes\n      .concat([])\n      .map(attribute => attribute.bind(gl, program));\n  }\n}\n\nexport { BasicMaterial };\n","import { BasicMaterial } from \"../BasicMaterial\";\n\nclass PbrMetallicRoughnessMaterial extends BasicMaterial {\n  constructor(\n    attributes,\n    uniforms,\n    texturesData = [],\n    vertexShaderPartial,\n    fragmentShaderPartial\n  ) {\n    super(\n      attributes,\n      uniforms,\n      texturesData,\n      vertexShaderPartial,\n      fragmentShaderPartial\n    );\n  }\n}\n\nexport { PbrMetallicRoughnessMaterial };\n","import { Transform } from \"../Transform\";\n\nclass Primitive {\n  constructor(gl, conf) {\n    this.gl = gl;\n    //stuff to access\n    this.vao = null;\n    this.hasRenderedOnce = false;\n\n    this.program = conf.material.createProgram(this.gl);\n\n    this.material = conf.material;\n    this.uniforms = this.material.bindUniforms(this.gl, this.program);\n    this.attributes = this.material.bindAttributes(this.gl, this.program);\n    this.indices = conf.indices || null;\n    //draw stuff\n    this.draw = conf.draw || {\n      primitiveType: 4,\n      offset: 0,\n      count: 3\n    };\n    this.draw.count = conf.count;\n    this.transform = new Transform();\n    this.init();\n  }\n\n  get matrix() {\n    return this.transform.matrix;\n  }\n\n  get translation() {\n    return this.transform.translation;\n  }\n\n  get rotation() {\n    return this.transform.rotation;\n  }\n\n  get scale() {\n    return this.transform.scale;\n  }\n\n  computeMatrix(m) {\n    this.transform.computeMatrix(m);\n  }\n\n  setUniform(name, data) {\n    this.uniforms.find(u => u.name === name).value = data;\n  }\n\n  updateUniform(name, value) {\n    this.uniforms.find(u => u.name === name).update(value);\n  }\n\n  updateUniforms() {\n    this.uniforms.forEach(uniform => {\n      uniform.update();\n    });\n  }\n\n  beforeDraw(dt) {}\n\n  init() {\n    const gl = this.gl;\n\n    this.vao = gl.createVertexArray();\n    gl.bindVertexArray(this.vao);\n\n    this.attributes.forEach(attribute => {\n      if (!!attribute.srcData) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n        gl.bufferData(gl.ARRAY_BUFFER, attribute.array, gl.STATIC_DRAW);\n      }\n\n      const conf = {\n        location: attribute.location,\n        size: attribute.size,\n        type: attribute.componentType,\n        normalize: true,\n        stride: attribute.stride,\n        offset: attribute.offset\n      };\n\n      if (this.indices) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\n        const elementsConf = {\n          target: gl.ELEMENT_ARRAY_BUFFER,\n          srcData: new Uint16Array(this.indices.srcData),\n          usage: gl.STATIC_DRAW\n        };\n        gl.bufferData(\n          elementsConf.target,\n          elementsConf.srcData,\n          elementsConf.usage\n        );\n      }\n\n      gl.vertexAttribPointer(\n        conf.location,\n        conf.size,\n        conf.type,\n        conf.normalize,\n        conf.stride,\n        conf.offset\n      );\n\n      gl.enableVertexAttribArray(attribute.location);\n    });\n  }\n}\n\nexport { Primitive };\n","import { Primitive } from \"./index\";\nimport { PbrMetallicRoughnessMaterial } from \"../Material/PbrMetallicRoughnessMaterial\";\n\nclass GltfPrimitive extends Primitive {\n  constructor(\n    gl,\n    primitiveData,\n    textureData = [],\n    vertexPartial,\n    fragmentPartial\n  ) {\n    const material = new PbrMetallicRoughnessMaterial(\n      primitiveData.attributes,\n      [],\n      textureData,\n      vertexPartial,\n      fragmentPartial\n    );\n    const conf = {\n      count: primitiveData.attributes[0].count, //POSITION, maybe..\n      material,\n      indices: primitiveData.indices\n    };\n    super(gl, conf);\n  }\n}\n\nexport { GltfPrimitive };\n","import { WebGLRenderer } from \"./WebGLRenderer\";\n\nexport * from \"./Camera\";\nexport * from \"./Material\";\nexport * from \"./Material/BasicMaterial\";\nexport * from \"./Material/PbrMetallicRoughnessMaterial\";\nexport * from \"./Primitive\";\nexport * from \"./Primitive/GltfPrimitive\";\nexport * from \"./Shader\";\nexport * from \"./Transform\";\nexport * from \"./Attribute\";\nexport * from \"./m4\";\nexport * from \"./TextureUniform\";\nexport * from \"./Uniform\";\nexport * from \"./utils\";\nexport { WebGLRenderer };\n","import fragmentShaderPartial from \"./fragment.glsl\";\nimport vertexShaderPartial from \"./vertex.glsl\";\nimport { BasicMaterial, Primitive } from \"@nardgl/core\";\n\nlet srcData = [\n  0,\n  -1,\n  0,\n  3,\n\n  0,\n  1,\n  0,\n  3,\n\n  0,\n  0,\n  -1,\n  2,\n\n  0,\n  0,\n  1,\n  2,\n\n  -1,\n  0,\n  0,\n  1,\n\n  1,\n  0,\n  0,\n  1\n];\nlet subDiv = 14;\nlet step = 2 / subDiv;\n\nfor (var i = step; i <= 1; i += step) {\n  let verticals = [i, 1, 0, 0, i, -1, 0, 0, -i, 1, 0, 0, -i, -1, 0, 0];\n  let horizontals = [1, i, 0, 0, -1, i, 0, 0, 1, -i, 0, 0, -1, -i, 0, 0];\n  srcData = [...srcData, ...verticals, ...horizontals];\n}\n\nconst count = srcData.length / 4;\n\nconst attributesData = [\n  {\n    name: \"a_position\",\n    type: \"VEC3\",\n    componentType: 5126,\n    count,\n    srcData,\n    stride: Float32Array.BYTES_PER_ELEMENT * 4,\n    offset: 0\n  },\n  {\n    name: \"a_colors\",\n    type: \"SCALAR\",\n    componentType: 5126,\n    count,\n    stride: Float32Array.BYTES_PER_ELEMENT * 4,\n    offset: Float32Array.BYTES_PER_ELEMENT * 3\n  }\n];\n\nconst uniformsData = [\n  {\n    name: \"u_colors\",\n    type: \"3fv\",\n    value: [0.8, 0.8, 0.8, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    count: 4\n  }\n];\n\nconst material = new BasicMaterial(\n  attributesData,\n  uniformsData,\n  [],\n  vertexShaderPartial,\n  fragmentShaderPartial\n);\n\nconst conf = {\n  material,\n  count,\n  draw: {\n    primitiveType: 1,\n    offset: 0\n  }\n};\n\nclass Grid extends Primitive {\n  constructor(gl) {\n    super(gl, conf);\n  }\n\n  beforeDraw() {\n    this.setUniform(\"u_modelMatrix\", this.matrix);\n  }\n}\n\nexport { Grid };\n","export * from \"./Grid\";\n","module.exports=\"#define GLSLIFY 1\\nvoid main() {\\n  gl_PointSize = u_pointSize;\\n  vec4 modelPosition = u_modelMatrix * vec4(a_position, 1.0);\\n\\n  gl_Position = u_projectionMatrix * u_viewMatrix * modelPosition;\\n  //gl_Position = modelViewPosition;\\n}\";","module.exports=\"#define GLSLIFY 1\\nout vec4 outColor;\\n\\nvoid main() {\\n  float r = length(gl_PointCoord.xy - vec2(0.5));\\n  if(r > 0.5) {\\n    discard;\\n  } else {\\n    outColor = vec4(0.0, 0.0, 0.0, 1.0);\\n  }\\n}\";","import vertexShaderPartial from \"./vertex.glsl\";\nimport fragmentShaderPartial from \"./fragment.glsl\";\nimport { Primitive, BasicMaterial } from \"nardgl\";\n\nconst attributesData = [\n  {\n    name: \"a_position\",\n    type: \"VEC3\",\n    componentType: 5126,\n    count: 3,\n    srcData: [0, 0, 0, 0.5, 0.5, 0, -0.5, -0.5, 0],\n    stride: 0,\n    offset: 0\n  }\n];\n\nconst uniformsData = [\n  {\n    name: \"u_pointSize\",\n    type: \"1f\",\n    value: 50,\n    count: 1\n  }\n];\n\nconst material = new BasicMaterial(\n  attributesData,\n  uniformsData,\n  [],\n  vertexShaderPartial,\n  fragmentShaderPartial\n);\n\nconst draw = {\n  primitiveType: 0,\n  offset: 0\n};\n\nconst conf = {\n  material,\n  draw,\n  count: 3\n};\n\nclass Particles extends Primitive {\n  constructor(gl) {\n    super(gl, conf);\n  }\n\n  beforeDraw(dt) {\n    this.setUniform(\"u_modelMatrix\", this.matrix);\n    this.setUniform(\"u_pointSize\", (Math.sin(dt / 1000) * 0.5 + 0.5) * 41);\n  }\n}\n\nexport { Particles };\n","module.exports=\"#define GLSLIFY 1\\nout lowp vec4 color;\\t//Color to send to fragment shader.\\n\\nvoid main() {\\n  color = COLOR_0;\\n  gl_PointSize = 15.0;\\n  vec4 modelPosition = u_modelMatrix * vec4(POSITION, 1.0);\\n  gl_Position = u_projectionMatrix * u_viewMatrix * modelPosition;\\n}\";","module.exports=\"#define GLSLIFY 1\\nin vec4 color;\\nout vec4 finalColor;\\n\\nvoid main(void){\\n\\tfinalColor = vec4(color.rgb, 1.0);\\n}\";","import * as NARD from \"nardgl\";\nimport vertexPartial from \"./vertex.glsl\";\nimport fragmentPartial from \"./fragment.glsl\";\n\nclass Quad extends NARD.GltfPrimitive {\n  constructor(gl, primitiveData) {\n    super(gl, primitiveData, [], vertexPartial, fragmentPartial);\n  }\n\n  beforeDraw() {\n    this.setUniform(\"u_modelMatrix\", this.matrix);\n  }\n}\n\nexport { Quad };\n","module.exports=\"#define GLSLIFY 1\\n//out vec4 color;\\t//Color to send to fragment shader.\\n//out vec3 vNormal; \\nout vec2 vUv;\\n\\nvoid main() {\\n  vec4 modelPosition = u_modelMatrix * vec4(POSITION, 1.0);\\n  gl_Position = u_projectionMatrix * u_viewMatrix * modelPosition;\\n  vUv = TEXCOORD_0;\\n}\";","module.exports=\"#define GLSLIFY 1\\nout vec4 finalColor;\\nin vec2 vUv;\\n\\nvoid main(void){\\n\\t// finalColor = vec4(1.0, 0.0, 0.0, 1.0);\\n\\tfinalColor = texture(u_texture, vUv);\\n}\";","import { GltfPrimitive } from \"nardgl\";\nimport vertexPartial from \"./vertex.glsl\";\nimport fragmentPartial from \"./fragment.glsl\";\n\nclass TexturedCube extends GltfPrimitive {\n  constructor(gl, primitiveData) {\n    primitiveData.attributes = [\n      primitiveData.attributes[0],\n      primitiveData.attributes[2]\n    ];\n\n    super(\n      gl,\n      primitiveData,\n      [\n        {\n          name: \"u_texture\",\n          src:\n            primitiveData.material.pbrMetallicRoughness.baseColorTexture.texture\n        }\n      ],\n      vertexPartial,\n      fragmentPartial\n    );\n  }\n\n  beforeDraw() {\n    this.setUniform(\"u_modelMatrix\", this.matrix);\n  }\n}\n\nexport { TexturedCube };\n"]}